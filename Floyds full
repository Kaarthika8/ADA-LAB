import java.util.Scanner;

public class FloydWarshall {
    public static void floyds(int[][] p, int n) {
        for (int k = 1; k <= n; k++)
            for (int i = 1; i <= n; i++)
                for (int j = 1; j <= n; j++)
                    p[i][j] = Math.min(p[i][j], p[i][k] + p[k][j]);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("\nEnter the number of vertices: ");
        int n = sc.nextInt();
        int[][] p = new int[10][10];

        System.out.print("\nEnter the number of edges:\n");
        int e = sc.nextInt();

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++)
                p[i][j] = 999;
        }

        for (int i = 1; i <= e; i++) {
            System.out.printf("\nEnter the end vertices of edge %d with its weight:\n", i);
            int u = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            p[u][v] = w;
        }

        System.out.println("\nMatrix of input data:");
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++)
                System.out.print(p[i][j] + "\t");
            System.out.println();
        }

        long st = System.nanoTime();
        floyds(p, n);
        long et = System.nanoTime();
        long ext = (et-st)/1000000;
        System.out.println("\nTransitive closure:");
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++)
                System.out.print(p[i][j] + "\t");
            System.out.println();
        }

        System.out.println("\nThe shortest paths are:");
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= n; j++) {
                if (i != j)
                    System.out.printf("\n<%d,%d>=%d", i, j, p[i][j]);
            }
    
    System.out.println("Time taken : "+ext+" ms");
}
}
