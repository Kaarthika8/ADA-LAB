import java.util.Scanner;

public class DijkstraAlgorithm {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n, i, j, v, k, min, u;

        System.out.println("Enter the number of vertices");
        n = scanner.nextInt();

        int[][] a = new int[10][10];
        int[] s = new int[10];
        int[] d = new int[10];

        System.out.println("Enter the cost matrix");
        System.out.println("Enter 999 if no edge between vertices");
        for (i = 1; i <= n; i++)
            for (j = 1; j <= n; j++)
                a[i][j] = scanner.nextInt();

        System.out.println("Enter the source vertex");
        v = scanner.nextInt();

        long startTime = System.nanoTime();

        for (i = 1; i <= n; i++) {
            s[i] = 0;
            d[i] = a[v][i];
        }
        d[v] = 0;
        s[v] = 1;

        for (k = 2; k <= n; k++) {
            min = 999;
            u = 0;
            for (i = 1; i <= n; i++)
                if (s[i] == 0 && d[i] < min) {
                    min = d[i];
                    u = i;
                }
            s[u] = 1;
            for (i = 1; i <= n; i++)
                if (s[i] == 0)
                    if (d[i] > (d[u] + a[u][i]))
                        d[i] = d[u] + a[u][i];
        }

        long endTime = System.nanoTime();
        long timeTaken = endTime - startTime;

        System.out.println("The shortest distance from " + v + " is ");
        for (i = 1; i <= n; i++)
            System.out.println(v + "-->" + i + "=" + d[i]);

        System.out.println("Time taken: " + timeTaken + " nanoseconds");
    }
}
